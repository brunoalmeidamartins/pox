		# Funcao que cria um ARP_REPLY a partir de um MAC conhecido
		def replyARP(a,mac):
			r = pkt.arp()
			r.hwtype = a.hwtype
			r.prototype = a.prototype
			r.hwlen = a.hwlen
			r.protolen = a.protolen
			r.opcode = pkt.arp.REPLY
			r.hwdst = a.hwsrc
			r.hwsrc = mac
			r.protodst = a.protosrc
			r.protosrc = a.protodst
       			e = pkt.ethernet(type=packet.type,dst=a.hwsrc)
			e.payload = r
			log.info('Switch %d answering ARP_REPLY for %s to port %s' %(event.dpid,str(a.protodst),event.port))
			msg = of.ofp_packet_out()
			msg.data = e.pack()
			msg.actions.append(of.ofp_action_output(port=event.port))
			event.connection.send(msg)

		# Funcao que encaminha um ARP_REQUEST aos hosts
		def forwardARP(a):
			self.switches = core.Traffic.switches
			for s in self.switches.keys():
				for p in self.switches[s].keys():
					if s == event.dpid and p == event.port:
						continue
					if p < 1000 and core.openflow_discovery.is_edge_port(s,p):
			       			e = pkt.ethernet(type=packet.type,src=a.hwsrc,dst=EthAddr('ff:ff:ff:ff:ff:ff'))
						log.info('Switch %d forwarding ARP_REQUEST for %s to port %s' %(s,str(a.protodst),p))
						e.payload = a
						msg = of.ofp_packet_out()
						msg.data = e.pack()
						msg.actions.append(of.ofp_action_output(port=p))
						core.openflow.getConnection(s).send(msg)

		# Funcao que encaminha um ARP_REPLY a partir de um ARP_REQUEST
		def sendARP(a):
			s,p = getSwitchPort(a.protodst)
			e = pkt.ethernet(type=packet.type,src=a.hwsrc,dst=a.hwdst)
			e.payload = a
			log.info('Switch %d answering ARP_REPLY for %s to port %s' %(s,str(a.protosrc),p))
			msg = of.ofp_packet_out()
			msg.data = e.pack()
			msg.actions.append(of.ofp_action_output(port=p))
			core.openflow.getConnection(s).send(msg)
